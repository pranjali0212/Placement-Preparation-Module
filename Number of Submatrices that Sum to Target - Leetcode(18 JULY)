class Solution {
public:int subarraySum(vector<int>& nums, int k) {
        int count=0;
        map<int,int>m;
        int sum=0;
        int i=0;
        while(i<nums.size()){
            sum=nums[i]+sum;
            if(sum==k){
                count++;
            }
            if(m.find(sum-k)!=m.end()){
                count+=m[sum-k];
                    // =m[sum-k];
            }
            m[sum]++;
            i++;
        }
        return count;
    }
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int count=0;
        for(int i=0;i<matrix.size();i++){
            vector<int> s(matrix[0].size(),0);
            for(int j=i;j<matrix.size();j++){
                for(int k=0;k<matrix[0].size();k++){
                    s[k]+=matrix[j][k];
                }
                count+=subarraySum(s,target);
            }
        }
        return count;
    }
};
